
stm32f411x_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000854  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009ec  080009f4  000109f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009ec  080009ec  000109f4  2**0
                  CONTENTS
  4 .ARM          00000000  080009ec  080009ec  000109f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009ec  080009f4  000109f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009ec  080009ec  000109ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009f0  080009f0  000109f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000109f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009d3  00000000  00000000  00010a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000028d  00000000  00000000  000113f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00011680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000a8  00000000  00000000  00011750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001474  00000000  00000000  000117f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ed2  00000000  00000000  00012c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000568d  00000000  00000000  00013b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000191cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000028c  00000000  00000000  00019220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080009d4 	.word	0x080009d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080009d4 	.word	0x080009d4

080001d8 <delay>:
#include "stm32f411x.h"

#define GPIO_BUTTON_PRESSED HIGH

void delay()
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	0003d08f 	.word	0x0003d08f

08000204 <GPIO_LED_Toggle>:



void GPIO_LED_Toggle()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIODLed;
	GPIODLed.pGPIOx = GPIOD;
 800020a:	4b1f      	ldr	r3, [pc, #124]	; (8000288 <GPIO_LED_Toggle+0x84>)
 800020c:	607b      	str	r3, [r7, #4]
	GPIODLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800020e:	230c      	movs	r3, #12
 8000210:	723b      	strb	r3, [r7, #8]
	GPIODLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000212:	2301      	movs	r3, #1
 8000214:	727b      	strb	r3, [r7, #9]
	GPIODLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000216:	2303      	movs	r3, #3
 8000218:	72bb      	strb	r3, [r7, #10]
	GPIODLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PP;
 800021a:	2300      	movs	r3, #0
 800021c:	733b      	strb	r3, [r7, #12]
	GPIODLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800021e:	2300      	movs	r3, #0
 8000220:	72fb      	strb	r3, [r7, #11]


	GPIO_Init(&GPIODLed);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f94b 	bl	80004c0 <GPIO_Init>

	GPIODLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800022a:	230d      	movs	r3, #13
 800022c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIODLed);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f945 	bl	80004c0 <GPIO_Init>

	GPIODLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000236:	230e      	movs	r3, #14
 8000238:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIODLed);
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f93f 	bl	80004c0 <GPIO_Init>

	GPIODLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000242:	230f      	movs	r3, #15
 8000244:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GPIODLed);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f939 	bl	80004c0 <GPIO_Init>


	GPIO_TogglePin(GPIOD, GPIO_PIN_NO_12);
 800024e:	210c      	movs	r1, #12
 8000250:	480d      	ldr	r0, [pc, #52]	; (8000288 <GPIO_LED_Toggle+0x84>)
 8000252:	f000 fab7 	bl	80007c4 <GPIO_TogglePin>
	delay();
 8000256:	f7ff ffbf 	bl	80001d8 <delay>

	GPIO_TogglePin(GPIOD, GPIO_PIN_NO_13);
 800025a:	210d      	movs	r1, #13
 800025c:	480a      	ldr	r0, [pc, #40]	; (8000288 <GPIO_LED_Toggle+0x84>)
 800025e:	f000 fab1 	bl	80007c4 <GPIO_TogglePin>
	delay();
 8000262:	f7ff ffb9 	bl	80001d8 <delay>

	GPIO_TogglePin(GPIOD, GPIO_PIN_NO_14);
 8000266:	210e      	movs	r1, #14
 8000268:	4807      	ldr	r0, [pc, #28]	; (8000288 <GPIO_LED_Toggle+0x84>)
 800026a:	f000 faab 	bl	80007c4 <GPIO_TogglePin>
	delay();
 800026e:	f7ff ffb3 	bl	80001d8 <delay>

	GPIO_TogglePin(GPIOD, GPIO_PIN_NO_15);
 8000272:	210f      	movs	r1, #15
 8000274:	4804      	ldr	r0, [pc, #16]	; (8000288 <GPIO_LED_Toggle+0x84>)
 8000276:	f000 faa5 	bl	80007c4 <GPIO_TogglePin>
	delay();
 800027a:	f7ff ffad 	bl	80001d8 <delay>
}
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40020c00 	.word	0x40020c00

0800028c <main>:




int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOLed;
	GPIO_Handle_t GPIOBtn;


	GPIOLed.pGPIOx = GPIOD;
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <main+0x7c>)
 8000294:	60fb      	str	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000296:	230c      	movs	r3, #12
 8000298:	743b      	strb	r3, [r7, #16]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800029a:	2301      	movs	r3, #1
 800029c:	747b      	strb	r3, [r7, #17]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800029e:	2302      	movs	r3, #2
 80002a0:	74bb      	strb	r3, [r7, #18]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PP;
 80002a2:	2300      	movs	r3, #0
 80002a4:	753b      	strb	r3, [r7, #20]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	74fb      	strb	r3, [r7, #19]

	GPIOBtn.pGPIOx = GPIOA;
 80002aa:	4b18      	ldr	r3, [pc, #96]	; (800030c <main+0x80>)
 80002ac:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80002b2:	2304      	movs	r3, #4
 80002b4:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002b6:	2302      	movs	r3, #2
 80002b8:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ba:	2300      	movs	r3, #0
 80002bc:	71fb      	strb	r3, [r7, #7]


	GPIO_PClk_Ctl(GPIOD, ENABLE);
 80002be:	2101      	movs	r1, #1
 80002c0:	4811      	ldr	r0, [pc, #68]	; (8000308 <main+0x7c>)
 80002c2:	f000 f85d 	bl	8000380 <GPIO_PClk_Ctl>
	GPIO_PClk_Ctl(GPIOA, ENABLE);
 80002c6:	2101      	movs	r1, #1
 80002c8:	4810      	ldr	r0, [pc, #64]	; (800030c <main+0x80>)
 80002ca:	f000 f859 	bl	8000380 <GPIO_PClk_Ctl>

	GPIO_Init(&GPIOLed);
 80002ce:	f107 030c 	add.w	r3, r7, #12
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f8f4 	bl	80004c0 <GPIO_Init>

	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002d8:	230e      	movs	r3, #14
 80002da:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GPIOLed);
 80002dc:	f107 030c 	add.w	r3, r7, #12
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 f8ed 	bl	80004c0 <GPIO_Init>

	GPIO_Init(&GPIOBtn);
 80002e6:	463b      	mov	r3, r7
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f8e9 	bl	80004c0 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRI15);
 80002ee:	210f      	movs	r1, #15
 80002f0:	2006      	movs	r0, #6
 80002f2:	f000 faff 	bl	80008f4 <GPIO_IRQPriorityConfig>
	GPIO_IRQConfig(IRQ_NO_EXTI0, ENABLE);
 80002f6:	2101      	movs	r1, #1
 80002f8:	2006      	movs	r0, #6
 80002fa:	f000 fa77 	bl	80007ec <GPIO_IRQConfig>



	while(1)
	{
		delay();
 80002fe:	f7ff ff6b 	bl	80001d8 <delay>
		GPIO_LED_Toggle();
 8000302:	f7ff ff7f 	bl	8000204 <GPIO_LED_Toggle>
		delay();
 8000306:	e7fa      	b.n	80002fe <main+0x72>
 8000308:	40020c00 	.word	0x40020c00
 800030c:	40020000 	.word	0x40020000

08000310 <EXTI0_IRQHandler>:




void EXTI0_IRQHandler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000314:	2000      	movs	r0, #0
 8000316:	f000 fb19 	bl	800094c <GPIO_IRQHandling>
	GPIO_TogglePin(GPIOD, GPIO_PIN_NO_12);
 800031a:	210c      	movs	r1, #12
 800031c:	4802      	ldr	r0, [pc, #8]	; (8000328 <EXTI0_IRQHandler+0x18>)
 800031e:	f000 fa51 	bl	80007c4 <GPIO_TogglePin>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020c00 	.word	0x40020c00

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000330:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	; (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f000 fb17 	bl	800098c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff95 	bl	800028c <main>

08000362 <LoopForever>:

LoopForever:
    b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000370:	080009f4 	.word	0x080009f4
  ldr r2, =_sbss
 8000374:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000378:	2000001c 	.word	0x2000001c

0800037c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC_IRQHandler>
	...

08000380 <GPIO_PClk_Ctl>:
 * @Note		- none
 *
 */

void GPIO_PClk_Ctl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800038c:	78fb      	ldrb	r3, [r7, #3]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d141      	bne.n	8000416 <GPIO_PClk_Ctl+0x96>
	{
		if(pGPIOx == GPIOA)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a43      	ldr	r2, [pc, #268]	; (80004a4 <GPIO_PClk_Ctl+0x124>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PClk_Ctl+0x28>
		{
			GPIOA_PCLK_EN();
 800039a:	4b43      	ldr	r3, [pc, #268]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a42      	ldr	r2, [pc, #264]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DI();
		}
	}

}
 80003a6:	e077      	b.n	8000498 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOB)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a40      	ldr	r2, [pc, #256]	; (80004ac <GPIO_PClk_Ctl+0x12c>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PClk_Ctl+0x3e>
			GPIOB_PCLK_EN();
 80003b0:	4b3d      	ldr	r3, [pc, #244]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a3c      	ldr	r2, [pc, #240]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003bc:	e06c      	b.n	8000498 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOC)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a3b      	ldr	r2, [pc, #236]	; (80004b0 <GPIO_PClk_Ctl+0x130>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PClk_Ctl+0x54>
			GPIOC_PCLK_EN();
 80003c6:	4b38      	ldr	r3, [pc, #224]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a37      	ldr	r2, [pc, #220]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 80003cc:	f043 0304 	orr.w	r3, r3, #4
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d2:	e061      	b.n	8000498 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOD)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a37      	ldr	r2, [pc, #220]	; (80004b4 <GPIO_PClk_Ctl+0x134>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PClk_Ctl+0x6a>
			GPIOD_PCLK_EN();
 80003dc:	4b32      	ldr	r3, [pc, #200]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a31      	ldr	r2, [pc, #196]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 80003e2:	f043 0308 	orr.w	r3, r3, #8
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e8:	e056      	b.n	8000498 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOE)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a32      	ldr	r2, [pc, #200]	; (80004b8 <GPIO_PClk_Ctl+0x138>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PClk_Ctl+0x80>
			GPIOE_PCLK_EN();
 80003f2:	4b2d      	ldr	r3, [pc, #180]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a2c      	ldr	r2, [pc, #176]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 80003f8:	f043 0310 	orr.w	r3, r3, #16
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e04b      	b.n	8000498 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOH)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a2e      	ldr	r2, [pc, #184]	; (80004bc <GPIO_PClk_Ctl+0x13c>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d147      	bne.n	8000498 <GPIO_PClk_Ctl+0x118>
			GPIOH_PCLK_EN();
 8000408:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a26      	ldr	r2, [pc, #152]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 800040e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000414:	e040      	b.n	8000498 <GPIO_PClk_Ctl+0x118>
		if(pGPIOx == GPIOA)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a22      	ldr	r2, [pc, #136]	; (80004a4 <GPIO_PClk_Ctl+0x124>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PClk_Ctl+0xac>
			GPIOA_PCLK_DI();
 800041e:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042a:	e035      	b.n	8000498 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOB)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a1f      	ldr	r2, [pc, #124]	; (80004ac <GPIO_PClk_Ctl+0x12c>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PClk_Ctl+0xc2>
			GPIOB_PCLK_DI();
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 800043a:	f043 0302 	orr.w	r3, r3, #2
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000440:	e02a      	b.n	8000498 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOC)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a1a      	ldr	r2, [pc, #104]	; (80004b0 <GPIO_PClk_Ctl+0x130>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PClk_Ctl+0xd8>
			GPIOC_PCLK_DI();
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000456:	e01f      	b.n	8000498 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOD)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <GPIO_PClk_Ctl+0x134>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PClk_Ctl+0xee>
			GPIOD_PCLK_DI();
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a10      	ldr	r2, [pc, #64]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046c:	e014      	b.n	8000498 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOE)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <GPIO_PClk_Ctl+0x138>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PClk_Ctl+0x104>
			GPIOE_PCLK_DI();
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a0b      	ldr	r2, [pc, #44]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 800047c:	f043 0310 	orr.w	r3, r3, #16
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000482:	e009      	b.n	8000498 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOH)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <GPIO_PClk_Ctl+0x13c>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d105      	bne.n	8000498 <GPIO_PClk_Ctl+0x118>
			GPIOH_PCLK_DI();
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <GPIO_PClk_Ctl+0x128>)
 8000492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000496:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40020000 	.word	0x40020000
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40020800 	.word	0x40020800
 80004b4:	40020c00 	.word	0x40020c00
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40021c00 	.word	0x40021c00

080004c0 <GPIO_Init>:
 *
 * @Note		- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b087      	sub	sp, #28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]

	//1. Configure the GPIO Mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	795b      	ldrb	r3, [r3, #5]
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d81f      	bhi.n	8000514 <GPIO_Init+0x54>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	461a      	mov	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	fa02 f303 	lsl.w	r3, r2, r3
 80004e4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	791b      	ldrb	r3, [r3, #4]
 80004f0:	4619      	mov	r1, r3
 80004f2:	2303      	movs	r3, #3
 80004f4:	408b      	lsls	r3, r1
 80004f6:	43db      	mvns	r3, r3
 80004f8:	4619      	mov	r1, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	400a      	ands	r2, r1
 8000500:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//setting
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	6819      	ldr	r1, [r3, #0]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	697a      	ldr	r2, [r7, #20]
 800050e:	430a      	orrs	r2, r1
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	e0a1      	b.n	8000658 <GPIO_Init+0x198>
	}
	else
	{
		// this configuration is for interrupt modes
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	2b04      	cmp	r3, #4
 800051a:	d117      	bne.n	800054c <GPIO_Init+0x8c>
		{
				// Enable FTSR register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051c:	4ba0      	ldr	r3, [pc, #640]	; (80007a0 <GPIO_Init+0x2e0>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	7912      	ldrb	r2, [r2, #4]
 8000524:	4611      	mov	r1, r2
 8000526:	2201      	movs	r2, #1
 8000528:	408a      	lsls	r2, r1
 800052a:	4611      	mov	r1, r2
 800052c:	4a9c      	ldr	r2, [pc, #624]	; (80007a0 <GPIO_Init+0x2e0>)
 800052e:	430b      	orrs	r3, r1
 8000530:	60d3      	str	r3, [r2, #12]

			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000532:	4b9b      	ldr	r3, [pc, #620]	; (80007a0 <GPIO_Init+0x2e0>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	7912      	ldrb	r2, [r2, #4]
 800053a:	4611      	mov	r1, r2
 800053c:	2201      	movs	r2, #1
 800053e:	408a      	lsls	r2, r1
 8000540:	43d2      	mvns	r2, r2
 8000542:	4611      	mov	r1, r2
 8000544:	4a96      	ldr	r2, [pc, #600]	; (80007a0 <GPIO_Init+0x2e0>)
 8000546:	400b      	ands	r3, r1
 8000548:	6093      	str	r3, [r2, #8]
 800054a:	e035      	b.n	80005b8 <GPIO_Init+0xf8>


		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	2b05      	cmp	r3, #5
 8000552:	d117      	bne.n	8000584 <GPIO_Init+0xc4>
		{
				// Enable RTSR register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000554:	4b92      	ldr	r3, [pc, #584]	; (80007a0 <GPIO_Init+0x2e0>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	4611      	mov	r1, r2
 8000564:	4a8e      	ldr	r2, [pc, #568]	; (80007a0 <GPIO_Init+0x2e0>)
 8000566:	430b      	orrs	r3, r1
 8000568:	6093      	str	r3, [r2, #8]

				// clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056a:	4b8d      	ldr	r3, [pc, #564]	; (80007a0 <GPIO_Init+0x2e0>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7912      	ldrb	r2, [r2, #4]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	43d2      	mvns	r2, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a88      	ldr	r2, [pc, #544]	; (80007a0 <GPIO_Init+0x2e0>)
 800057e:	400b      	ands	r3, r1
 8000580:	60d3      	str	r3, [r2, #12]
 8000582:	e019      	b.n	80005b8 <GPIO_Init+0xf8>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	795b      	ldrb	r3, [r3, #5]
 8000588:	2b06      	cmp	r3, #6
 800058a:	d115      	bne.n	80005b8 <GPIO_Init+0xf8>
		{
				// Enable FTSR and RTSR register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058c:	4b84      	ldr	r3, [pc, #528]	; (80007a0 <GPIO_Init+0x2e0>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7912      	ldrb	r2, [r2, #4]
 8000594:	4611      	mov	r1, r2
 8000596:	2201      	movs	r2, #1
 8000598:	408a      	lsls	r2, r1
 800059a:	4611      	mov	r1, r2
 800059c:	4a80      	ldr	r2, [pc, #512]	; (80007a0 <GPIO_Init+0x2e0>)
 800059e:	430b      	orrs	r3, r1
 80005a0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a2:	4b7f      	ldr	r3, [pc, #508]	; (80007a0 <GPIO_Init+0x2e0>)
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	7912      	ldrb	r2, [r2, #4]
 80005aa:	4611      	mov	r1, r2
 80005ac:	2201      	movs	r2, #1
 80005ae:	408a      	lsls	r2, r1
 80005b0:	4611      	mov	r1, r2
 80005b2:	4a7b      	ldr	r2, [pc, #492]	; (80007a0 <GPIO_Init+0x2e0>)
 80005b4:	430b      	orrs	r3, r1
 80005b6:	6093      	str	r3, [r2, #8]

		}

		// Configure SYSCFG_EXTICR register
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	089b      	lsrs	r3, r3, #2
 80005be:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	f003 0303 	and.w	r3, r3, #3
 80005c8:	74bb      	strb	r3, [r7, #18]

		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a75      	ldr	r2, [pc, #468]	; (80007a4 <GPIO_Init+0x2e4>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d024      	beq.n	800061e <GPIO_Init+0x15e>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a73      	ldr	r2, [pc, #460]	; (80007a8 <GPIO_Init+0x2e8>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d01d      	beq.n	800061a <GPIO_Init+0x15a>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a72      	ldr	r2, [pc, #456]	; (80007ac <GPIO_Init+0x2ec>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d016      	beq.n	8000616 <GPIO_Init+0x156>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a70      	ldr	r2, [pc, #448]	; (80007b0 <GPIO_Init+0x2f0>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d00f      	beq.n	8000612 <GPIO_Init+0x152>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a6f      	ldr	r2, [pc, #444]	; (80007b4 <GPIO_Init+0x2f4>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d008      	beq.n	800060e <GPIO_Init+0x14e>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a6d      	ldr	r2, [pc, #436]	; (80007b8 <GPIO_Init+0x2f8>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d101      	bne.n	800060a <GPIO_Init+0x14a>
 8000606:	2307      	movs	r3, #7
 8000608:	e00a      	b.n	8000620 <GPIO_Init+0x160>
 800060a:	2300      	movs	r3, #0
 800060c:	e008      	b.n	8000620 <GPIO_Init+0x160>
 800060e:	2304      	movs	r3, #4
 8000610:	e006      	b.n	8000620 <GPIO_Init+0x160>
 8000612:	2303      	movs	r3, #3
 8000614:	e004      	b.n	8000620 <GPIO_Init+0x160>
 8000616:	2302      	movs	r3, #2
 8000618:	e002      	b.n	8000620 <GPIO_Init+0x160>
 800061a:	2301      	movs	r3, #1
 800061c:	e000      	b.n	8000620 <GPIO_Init+0x160>
 800061e:	2300      	movs	r3, #0
 8000620:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000622:	4b66      	ldr	r3, [pc, #408]	; (80007bc <GPIO_Init+0x2fc>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	4a65      	ldr	r2, [pc, #404]	; (80007bc <GPIO_Init+0x2fc>)
 8000628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062c:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portCode << (4 * temp2);
 800062e:	7c7a      	ldrb	r2, [r7, #17]
 8000630:	7cbb      	ldrb	r3, [r7, #18]
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	fa02 f103 	lsl.w	r1, r2, r3
 8000638:	4a61      	ldr	r2, [pc, #388]	; (80007c0 <GPIO_Init+0x300>)
 800063a:	7cfb      	ldrb	r3, [r7, #19]
 800063c:	3302      	adds	r3, #2
 800063e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Configure IMR Register
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000642:	4b57      	ldr	r3, [pc, #348]	; (80007a0 <GPIO_Init+0x2e0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	7912      	ldrb	r2, [r2, #4]
 800064a:	4611      	mov	r1, r2
 800064c:	2201      	movs	r2, #1
 800064e:	408a      	lsls	r2, r1
 8000650:	4611      	mov	r1, r2
 8000652:	4a53      	ldr	r2, [pc, #332]	; (80007a0 <GPIO_Init+0x2e0>)
 8000654:	430b      	orrs	r3, r1
 8000656:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]

	//2. Configure the GPIO Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	799b      	ldrb	r3, [r3, #6]
 8000660:	461a      	mov	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  //clearing
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	4619      	mov	r1, r3
 800067a:	2303      	movs	r3, #3
 800067c:	408b      	lsls	r3, r1
 800067e:	43db      	mvns	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	400a      	ands	r2, r1
 8000688:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6899      	ldr	r1, [r3, #8]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	430a      	orrs	r2, r1
 8000698:	609a      	str	r2, [r3, #8]

	temp = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]

	//3. Configure the Pull Up/Down Settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	79db      	ldrb	r3, [r3, #7]
 80006a2:	461a      	mov	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  //clearing
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	4619      	mov	r1, r3
 80006bc:	2303      	movs	r3, #3
 80006be:	408b      	lsls	r3, r1
 80006c0:	43db      	mvns	r3, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	400a      	ands	r2, r1
 80006ca:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	68d9      	ldr	r1, [r3, #12]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	697a      	ldr	r2, [r7, #20]
 80006d8:	430a      	orrs	r2, r1
 80006da:	60da      	str	r2, [r3, #12]


	temp = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

	//4. Configure the Output Type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	7a1b      	ldrb	r3, [r3, #8]
 80006e4:	461a      	mov	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  //clearing
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	4619      	mov	r1, r3
 80006fc:	2301      	movs	r3, #1
 80006fe:	408b      	lsls	r3, r1
 8000700:	43db      	mvns	r3, r3
 8000702:	4619      	mov	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	400a      	ands	r2, r1
 800070a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6859      	ldr	r1, [r3, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	430a      	orrs	r2, r1
 800071a:	605a      	str	r2, [r3, #4]



	temp = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

	//5. Configure the alternate function mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	795b      	ldrb	r3, [r3, #5]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d136      	bne.n	8000796 <GPIO_Init+0x2d6>
	{
		uint8_t temp1 = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	08db      	lsrs	r3, r3, #3
 8000736:	743b      	strb	r3, [r7, #16]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	73fb      	strb	r3, [r7, #15]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	7a5b      	ldrb	r3, [r3, #9]
 8000746:	461a      	mov	r2, r3
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	617b      	str	r3, [r7, #20]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF <<  (4 * temp2));  //clearing
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	7c3a      	ldrb	r2, [r7, #16]
 8000758:	3208      	adds	r2, #8
 800075a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	220f      	movs	r2, #15
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	43db      	mvns	r3, r3
 800076a:	4618      	mov	r0, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	7c3a      	ldrb	r2, [r7, #16]
 8000772:	4001      	ands	r1, r0
 8000774:	3208      	adds	r2, #8
 8000776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	7c3a      	ldrb	r2, [r7, #16]
 8000780:	3208      	adds	r2, #8
 8000782:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	7c3a      	ldrb	r2, [r7, #16]
 800078c:	6979      	ldr	r1, [r7, #20]
 800078e:	4301      	orrs	r1, r0
 8000790:	3208      	adds	r2, #8
 8000792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000796:	bf00      	nop
 8000798:	371c      	adds	r7, #28
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40013c00 	.word	0x40013c00
 80007a4:	40020000 	.word	0x40020000
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40020c00 	.word	0x40020c00
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40021c00 	.word	0x40021c00
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40013800 	.word	0x40013800

080007c4 <GPIO_TogglePin>:
 * @Note		- none
 *
 */

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR	^= (1 << PinNumber);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	78fa      	ldrb	r2, [r7, #3]
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	405a      	eors	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	615a      	str	r2, [r3, #20]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <GPIO_IRQConfig>:
 * @Note		- none
 *
 */

void GPIO_IRQConfig(uint8_t IRQNumber,  uint8_t EnorDi)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	460a      	mov	r2, r1
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d133      	bne.n	800086a <GPIO_IRQConfig+0x7e>
	{
		if(IRQNumber < 32)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b1f      	cmp	r3, #31
 8000806:	d80a      	bhi.n	800081e <GPIO_IRQConfig+0x32>
		{
			NVIC_ISER0 |= (1 << IRQNumber);
 8000808:	4b34      	ldr	r3, [pc, #208]	; (80008dc <GPIO_IRQConfig+0xf0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	2101      	movs	r1, #1
 8000810:	fa01 f202 	lsl.w	r2, r1, r2
 8000814:	4611      	mov	r1, r2
 8000816:	4a31      	ldr	r2, [pc, #196]	; (80008dc <GPIO_IRQConfig+0xf0>)
 8000818:	430b      	orrs	r3, r1
 800081a:	6013      	str	r3, [r2, #0]
		{
			NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 800081c:	e059      	b.n	80008d2 <GPIO_IRQConfig+0xe6>
		else if(IRQNumber >=32 && IRQNumber < 64)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b1f      	cmp	r3, #31
 8000822:	d90f      	bls.n	8000844 <GPIO_IRQConfig+0x58>
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b3f      	cmp	r3, #63	; 0x3f
 8000828:	d80c      	bhi.n	8000844 <GPIO_IRQConfig+0x58>
			NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <GPIO_IRQConfig+0xf4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	f002 021f 	and.w	r2, r2, #31
 8000834:	2101      	movs	r1, #1
 8000836:	fa01 f202 	lsl.w	r2, r1, r2
 800083a:	4611      	mov	r1, r2
 800083c:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <GPIO_IRQConfig+0xf4>)
 800083e:	430b      	orrs	r3, r1
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	e046      	b.n	80008d2 <GPIO_IRQConfig+0xe6>
		else if(IRQNumber >=64 && IRQNumber < 96)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b3f      	cmp	r3, #63	; 0x3f
 8000848:	d943      	bls.n	80008d2 <GPIO_IRQConfig+0xe6>
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b5f      	cmp	r3, #95	; 0x5f
 800084e:	d840      	bhi.n	80008d2 <GPIO_IRQConfig+0xe6>
			NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <GPIO_IRQConfig+0xf8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	79fa      	ldrb	r2, [r7, #7]
 8000856:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800085a:	2101      	movs	r1, #1
 800085c:	fa01 f202 	lsl.w	r2, r1, r2
 8000860:	4611      	mov	r1, r2
 8000862:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <GPIO_IRQConfig+0xf8>)
 8000864:	430b      	orrs	r3, r1
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	e033      	b.n	80008d2 <GPIO_IRQConfig+0xe6>
		if(IRQNumber < 32)
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b1f      	cmp	r3, #31
 800086e:	d80a      	bhi.n	8000886 <GPIO_IRQConfig+0x9a>
			NVIC_ICER0 |= (1 << IRQNumber);
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <GPIO_IRQConfig+0xfc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	2101      	movs	r1, #1
 8000878:	fa01 f202 	lsl.w	r2, r1, r2
 800087c:	4611      	mov	r1, r2
 800087e:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <GPIO_IRQConfig+0xfc>)
 8000880:	430b      	orrs	r3, r1
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	e025      	b.n	80008d2 <GPIO_IRQConfig+0xe6>
		else if(IRQNumber >=32 && IRQNumber < 64)
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b1f      	cmp	r3, #31
 800088a:	d90f      	bls.n	80008ac <GPIO_IRQConfig+0xc0>
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2b3f      	cmp	r3, #63	; 0x3f
 8000890:	d80c      	bhi.n	80008ac <GPIO_IRQConfig+0xc0>
			NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <GPIO_IRQConfig+0x100>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	79fa      	ldrb	r2, [r7, #7]
 8000898:	f002 021f 	and.w	r2, r2, #31
 800089c:	2101      	movs	r1, #1
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	4611      	mov	r1, r2
 80008a4:	4a11      	ldr	r2, [pc, #68]	; (80008ec <GPIO_IRQConfig+0x100>)
 80008a6:	430b      	orrs	r3, r1
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	e012      	b.n	80008d2 <GPIO_IRQConfig+0xe6>
		else if(IRQNumber >=64 && IRQNumber < 96)
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b3f      	cmp	r3, #63	; 0x3f
 80008b0:	d90f      	bls.n	80008d2 <GPIO_IRQConfig+0xe6>
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b5f      	cmp	r3, #95	; 0x5f
 80008b6:	d80c      	bhi.n	80008d2 <GPIO_IRQConfig+0xe6>
			NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <GPIO_IRQConfig+0x104>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008c2:	2101      	movs	r1, #1
 80008c4:	fa01 f202 	lsl.w	r2, r1, r2
 80008c8:	4611      	mov	r1, r2
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <GPIO_IRQConfig+0x104>)
 80008cc:	430b      	orrs	r3, r1
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	e7ff      	b.n	80008d2 <GPIO_IRQConfig+0xe6>
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000e104 	.word	0xe000e104
 80008e4:	e000e108 	.word	0xe000e108
 80008e8:	e000e180 	.word	0xe000e180
 80008ec:	e000e184 	.word	0xe000e184
 80008f0:	e000e188 	.word	0xe000e188

080008f4 <GPIO_IRQPriorityConfig>:
 * @Note		- none
 *
 */

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
	// Find the IPRx Register
	uint8_t iprx = IRQNumber / 4;
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	089b      	lsrs	r3, r3, #2
 8000904:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (iprx_section * 8) + (8 - NVIC_IPR_BITS_IMPLEMENTED);
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	3304      	adds	r3, #4
 8000916:	737b      	strb	r3, [r7, #13]

	NVIC_IPR(iprx) |= (IRQPriority << shift_amount);
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000920:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000924:	6819      	ldr	r1, [r3, #0]
 8000926:	7b7b      	ldrb	r3, [r7, #13]
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	409a      	lsls	r2, r3
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000934:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000938:	4618      	mov	r0, r3
 800093a:	ea41 0302 	orr.w	r3, r1, r2
 800093e:	6003      	str	r3, [r0, #0]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
	...

0800094c <GPIO_IRQHandling>:
 * @Note		- none
 *
 */

void GPIO_IRQHandling(uint8_t PinNumber)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]

	// clear the exit PR bit for corresponding Pin Number
	if(EXTI->PR & (1 << PinNumber))
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <GPIO_IRQHandling+0x3c>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	2101      	movs	r1, #1
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	4013      	ands	r3, r2
 8000964:	2b00      	cmp	r3, #0
 8000966:	d009      	beq.n	800097c <GPIO_IRQHandling+0x30>
	{
		EXTI->PR |= (1 << PinNumber);
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <GPIO_IRQHandling+0x3c>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	79fa      	ldrb	r2, [r7, #7]
 800096e:	2101      	movs	r1, #1
 8000970:	fa01 f202 	lsl.w	r2, r1, r2
 8000974:	4611      	mov	r1, r2
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <GPIO_IRQHandling+0x3c>)
 8000978:	430b      	orrs	r3, r1
 800097a:	6153      	str	r3, [r2, #20]
	}
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40013c00 	.word	0x40013c00

0800098c <__libc_init_array>:
 800098c:	b570      	push	{r4, r5, r6, lr}
 800098e:	4d0d      	ldr	r5, [pc, #52]	; (80009c4 <__libc_init_array+0x38>)
 8000990:	4c0d      	ldr	r4, [pc, #52]	; (80009c8 <__libc_init_array+0x3c>)
 8000992:	1b64      	subs	r4, r4, r5
 8000994:	10a4      	asrs	r4, r4, #2
 8000996:	2600      	movs	r6, #0
 8000998:	42a6      	cmp	r6, r4
 800099a:	d109      	bne.n	80009b0 <__libc_init_array+0x24>
 800099c:	4d0b      	ldr	r5, [pc, #44]	; (80009cc <__libc_init_array+0x40>)
 800099e:	4c0c      	ldr	r4, [pc, #48]	; (80009d0 <__libc_init_array+0x44>)
 80009a0:	f000 f818 	bl	80009d4 <_init>
 80009a4:	1b64      	subs	r4, r4, r5
 80009a6:	10a4      	asrs	r4, r4, #2
 80009a8:	2600      	movs	r6, #0
 80009aa:	42a6      	cmp	r6, r4
 80009ac:	d105      	bne.n	80009ba <__libc_init_array+0x2e>
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b4:	4798      	blx	r3
 80009b6:	3601      	adds	r6, #1
 80009b8:	e7ee      	b.n	8000998 <__libc_init_array+0xc>
 80009ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80009be:	4798      	blx	r3
 80009c0:	3601      	adds	r6, #1
 80009c2:	e7f2      	b.n	80009aa <__libc_init_array+0x1e>
 80009c4:	080009ec 	.word	0x080009ec
 80009c8:	080009ec 	.word	0x080009ec
 80009cc:	080009ec 	.word	0x080009ec
 80009d0:	080009f0 	.word	0x080009f0

080009d4 <_init>:
 80009d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d6:	bf00      	nop
 80009d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009da:	bc08      	pop	{r3}
 80009dc:	469e      	mov	lr, r3
 80009de:	4770      	bx	lr

080009e0 <_fini>:
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	bf00      	nop
 80009e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e6:	bc08      	pop	{r3}
 80009e8:	469e      	mov	lr, r3
 80009ea:	4770      	bx	lr
