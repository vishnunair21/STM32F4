
stm32f411x_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004dc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000674  0800067c  0001067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000674  08000674  0001067c  2**0
                  CONTENTS
  4 .ARM          00000000  08000674  08000674  0001067c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000674  0800067c  0001067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000674  08000674  00010674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000678  08000678  00010678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800067c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800067c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001067c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007cf  00000000  00000000  000106a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023d  00000000  00000000  00010e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  000110b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  00011160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000130c  00000000  00000000  000111e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c5e  00000000  00000000  000124ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004f16  00000000  00000000  0001314a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00018060  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  000180b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800065c 	.word	0x0800065c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800065c 	.word	0x0800065c

080001d8 <delay>:
#include "stm32f411x.h"


#define GPIO_BUTTON_PRESSED HIGH
void delay()
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	0003d08f 	.word	0x0003d08f

08000204 <main>:

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOLed;
	GPIO_Handle_t GPIOBtn;


	GPIOLed.pGPIOx = GPIOD;
 800020a:	4b20      	ldr	r3, [pc, #128]	; (800028c <main+0x88>)
 800020c:	60fb      	str	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800020e:	230c      	movs	r3, #12
 8000210:	743b      	strb	r3, [r7, #16]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000212:	2301      	movs	r3, #1
 8000214:	747b      	strb	r3, [r7, #17]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000216:	2302      	movs	r3, #2
 8000218:	74bb      	strb	r3, [r7, #18]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PP;
 800021a:	2300      	movs	r3, #0
 800021c:	753b      	strb	r3, [r7, #20]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800021e:	2300      	movs	r3, #0
 8000220:	74fb      	strb	r3, [r7, #19]

	GPIOBtn.pGPIOx = GPIOA;
 8000222:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <main+0x8c>)
 8000224:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000226:	2300      	movs	r3, #0
 8000228:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800022a:	2300      	movs	r3, #0
 800022c:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000232:	2300      	movs	r3, #0
 8000234:	71fb      	strb	r3, [r7, #7]


	GPIO_PClk_Ctl(GPIOD, ENABLE);
 8000236:	2101      	movs	r1, #1
 8000238:	4814      	ldr	r0, [pc, #80]	; (800028c <main+0x88>)
 800023a:	f000 f855 	bl	80002e8 <GPIO_PClk_Ctl>
	GPIO_PClk_Ctl(GPIOA, ENABLE);
 800023e:	2101      	movs	r1, #1
 8000240:	4813      	ldr	r0, [pc, #76]	; (8000290 <main+0x8c>)
 8000242:	f000 f851 	bl	80002e8 <GPIO_PClk_Ctl>

	GPIO_Init(&GPIOLed);
 8000246:	f107 030c 	add.w	r3, r7, #12
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f8ec 	bl	8000428 <GPIO_Init>

	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000250:	230e      	movs	r3, #14
 8000252:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&GPIOLed);
 8000254:	f107 030c 	add.w	r3, r7, #12
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f8e5 	bl	8000428 <GPIO_Init>

	GPIO_Init(&GPIOBtn);
 800025e:	463b      	mov	r3, r7
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f8e1 	bl	8000428 <GPIO_Init>

	while(1)
	{
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == GPIO_BUTTON_PRESSED)
 8000266:	2100      	movs	r1, #0
 8000268:	4809      	ldr	r0, [pc, #36]	; (8000290 <main+0x8c>)
 800026a:	f000 f9aa 	bl	80005c2 <GPIO_ReadFromInputPin>
 800026e:	4603      	mov	r3, r0
 8000270:	2b01      	cmp	r3, #1
 8000272:	d1f8      	bne.n	8000266 <main+0x62>
		{
			delay();
 8000274:	f7ff ffb0 	bl	80001d8 <delay>
			GPIO_TogglePin(GPIOD, GPIO_PIN_NO_12);
 8000278:	210c      	movs	r1, #12
 800027a:	4804      	ldr	r0, [pc, #16]	; (800028c <main+0x88>)
 800027c:	f000 f9b6 	bl	80005ec <GPIO_TogglePin>
			GPIO_TogglePin(GPIOD, GPIO_PIN_NO_14);
 8000280:	210e      	movs	r1, #14
 8000282:	4802      	ldr	r0, [pc, #8]	; (800028c <main+0x88>)
 8000284:	f000 f9b2 	bl	80005ec <GPIO_TogglePin>
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == GPIO_BUTTON_PRESSED)
 8000288:	e7ed      	b.n	8000266 <main+0x62>
 800028a:	bf00      	nop
 800028c:	40020c00 	.word	0x40020c00
 8000290:	40020000 	.word	0x40020000

08000294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000296:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000298:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800029e:	490d      	ldr	r1, [pc, #52]	; (80002d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <LoopForever+0xe>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a4:	e002      	b.n	80002ac <LoopCopyDataInit>

080002a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002aa:	3304      	adds	r3, #4

080002ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b0:	d3f9      	bcc.n	80002a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b4:	4c0a      	ldr	r4, [pc, #40]	; (80002e0 <LoopForever+0x16>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b8:	e001      	b.n	80002be <LoopFillZerobss>

080002ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002bc:	3204      	adds	r2, #4

080002be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c0:	d3fb      	bcc.n	80002ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c2:	f000 f9a7 	bl	8000614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c6:	f7ff ff9d 	bl	8000204 <main>

080002ca <LoopForever>:

LoopForever:
    b LoopForever
 80002ca:	e7fe      	b.n	80002ca <LoopForever>
  ldr   r0, =_estack
 80002cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d8:	0800067c 	.word	0x0800067c
  ldr r2, =_sbss
 80002dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC_IRQHandler>
	...

080002e8 <GPIO_PClk_Ctl>:
 * @Note		- none
 *
 */

void GPIO_PClk_Ctl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002f4:	78fb      	ldrb	r3, [r7, #3]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d141      	bne.n	800037e <GPIO_PClk_Ctl+0x96>
	{
		if(pGPIOx == GPIOA)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a43      	ldr	r2, [pc, #268]	; (800040c <GPIO_PClk_Ctl+0x124>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <GPIO_PClk_Ctl+0x28>
		{
			GPIOA_PCLK_EN();
 8000302:	4b43      	ldr	r3, [pc, #268]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000306:	4a42      	ldr	r2, [pc, #264]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DI();
		}
	}

}
 800030e:	e077      	b.n	8000400 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOB)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a40      	ldr	r2, [pc, #256]	; (8000414 <GPIO_PClk_Ctl+0x12c>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d106      	bne.n	8000326 <GPIO_PClk_Ctl+0x3e>
			GPIOB_PCLK_EN();
 8000318:	4b3d      	ldr	r3, [pc, #244]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031c:	4a3c      	ldr	r2, [pc, #240]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000324:	e06c      	b.n	8000400 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOC)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a3b      	ldr	r2, [pc, #236]	; (8000418 <GPIO_PClk_Ctl+0x130>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PClk_Ctl+0x54>
			GPIOC_PCLK_EN();
 800032e:	4b38      	ldr	r3, [pc, #224]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a37      	ldr	r2, [pc, #220]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033a:	e061      	b.n	8000400 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOD)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a37      	ldr	r2, [pc, #220]	; (800041c <GPIO_PClk_Ctl+0x134>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PClk_Ctl+0x6a>
			GPIOD_PCLK_EN();
 8000344:	4b32      	ldr	r3, [pc, #200]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a31      	ldr	r2, [pc, #196]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000350:	e056      	b.n	8000400 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOE)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a32      	ldr	r2, [pc, #200]	; (8000420 <GPIO_PClk_Ctl+0x138>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PClk_Ctl+0x80>
			GPIOE_PCLK_EN();
 800035a:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	4a2c      	ldr	r2, [pc, #176]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 8000360:	f043 0310 	orr.w	r3, r3, #16
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000366:	e04b      	b.n	8000400 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOH)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a2e      	ldr	r2, [pc, #184]	; (8000424 <GPIO_PClk_Ctl+0x13c>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d147      	bne.n	8000400 <GPIO_PClk_Ctl+0x118>
			GPIOH_PCLK_EN();
 8000370:	4b27      	ldr	r3, [pc, #156]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000374:	4a26      	ldr	r2, [pc, #152]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 8000376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037c:	e040      	b.n	8000400 <GPIO_PClk_Ctl+0x118>
		if(pGPIOx == GPIOA)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a22      	ldr	r2, [pc, #136]	; (800040c <GPIO_PClk_Ctl+0x124>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PClk_Ctl+0xac>
			GPIOA_PCLK_DI();
 8000386:	4b22      	ldr	r3, [pc, #136]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a21      	ldr	r2, [pc, #132]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000392:	e035      	b.n	8000400 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOB)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a1f      	ldr	r2, [pc, #124]	; (8000414 <GPIO_PClk_Ctl+0x12c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PClk_Ctl+0xc2>
			GPIOB_PCLK_DI();
 800039c:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a0:	4a1b      	ldr	r2, [pc, #108]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a8:	e02a      	b.n	8000400 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOC)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a1a      	ldr	r2, [pc, #104]	; (8000418 <GPIO_PClk_Ctl+0x130>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PClk_Ctl+0xd8>
			GPIOC_PCLK_DI();
 80003b2:	4b17      	ldr	r3, [pc, #92]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a16      	ldr	r2, [pc, #88]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003be:	e01f      	b.n	8000400 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOD)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a16      	ldr	r2, [pc, #88]	; (800041c <GPIO_PClk_Ctl+0x134>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PClk_Ctl+0xee>
			GPIOD_PCLK_DI();
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a10      	ldr	r2, [pc, #64]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d4:	e014      	b.n	8000400 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOE)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a11      	ldr	r2, [pc, #68]	; (8000420 <GPIO_PClk_Ctl+0x138>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PClk_Ctl+0x104>
			GPIOE_PCLK_DI();
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 80003e4:	f043 0310 	orr.w	r3, r3, #16
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ea:	e009      	b.n	8000400 <GPIO_PClk_Ctl+0x118>
		else if(pGPIOx == GPIOH)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a0d      	ldr	r2, [pc, #52]	; (8000424 <GPIO_PClk_Ctl+0x13c>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d105      	bne.n	8000400 <GPIO_PClk_Ctl+0x118>
			GPIOH_PCLK_DI();
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a05      	ldr	r2, [pc, #20]	; (8000410 <GPIO_PClk_Ctl+0x128>)
 80003fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40020000 	.word	0x40020000
 8000410:	40023800 	.word	0x40023800
 8000414:	40020400 	.word	0x40020400
 8000418:	40020800 	.word	0x40020800
 800041c:	40020c00 	.word	0x40020c00
 8000420:	40021000 	.word	0x40021000
 8000424:	40021c00 	.word	0x40021c00

08000428 <GPIO_Init>:
 *
 * @Note		- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]

	//1. Configure the GPIO Mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	795b      	ldrb	r3, [r3, #5]
 8000438:	2b03      	cmp	r3, #3
 800043a:	d81e      	bhi.n	800047a <GPIO_Init+0x52>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	795b      	ldrb	r3, [r3, #5]
 8000440:	461a      	mov	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	791b      	ldrb	r3, [r3, #4]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
 800044c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	791b      	ldrb	r3, [r3, #4]
 8000458:	4619      	mov	r1, r3
 800045a:	2303      	movs	r3, #3
 800045c:	408b      	lsls	r3, r1
 800045e:	43db      	mvns	r3, r3
 8000460:	4619      	mov	r1, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	400a      	ands	r2, r1
 8000468:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	//setting
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	430a      	orrs	r2, r1
 8000478:	601a      	str	r2, [r3, #0]
	else
	{
		// this configuration is for interrupt modes
	}

	temp = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]

	//2. Configure the GPIO Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	799b      	ldrb	r3, [r3, #6]
 8000482:	461a      	mov	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	fa02 f303 	lsl.w	r3, r2, r3
 800048e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  //clearing
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	689a      	ldr	r2, [r3, #8]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	791b      	ldrb	r3, [r3, #4]
 800049a:	4619      	mov	r1, r3
 800049c:	2303      	movs	r3, #3
 800049e:	408b      	lsls	r3, r1
 80004a0:	43db      	mvns	r3, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	400a      	ands	r2, r1
 80004aa:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6899      	ldr	r1, [r3, #8]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	430a      	orrs	r2, r1
 80004ba:	609a      	str	r2, [r3, #8]

	temp = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]

	//3. Configure the Pull Up/Down Settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	79db      	ldrb	r3, [r3, #7]
 80004c4:	461a      	mov	r2, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	791b      	ldrb	r3, [r3, #4]
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  //clearing
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	68da      	ldr	r2, [r3, #12]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	791b      	ldrb	r3, [r3, #4]
 80004dc:	4619      	mov	r1, r3
 80004de:	2303      	movs	r3, #3
 80004e0:	408b      	lsls	r3, r1
 80004e2:	43db      	mvns	r3, r3
 80004e4:	4619      	mov	r1, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	400a      	ands	r2, r1
 80004ec:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	68d9      	ldr	r1, [r3, #12]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	430a      	orrs	r2, r1
 80004fc:	60da      	str	r2, [r3, #12]


	temp = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]

	//4. Configure the Output Type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	7a1b      	ldrb	r3, [r3, #8]
 8000506:	461a      	mov	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);  //clearing
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	4619      	mov	r1, r3
 800051e:	2301      	movs	r3, #1
 8000520:	408b      	lsls	r3, r1
 8000522:	43db      	mvns	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	400a      	ands	r2, r1
 800052c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	6859      	ldr	r1, [r3, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	430a      	orrs	r2, r1
 800053c:	605a      	str	r2, [r3, #4]



	temp = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]

	//5. Configure the alternate function mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	795b      	ldrb	r3, [r3, #5]
 8000546:	2b02      	cmp	r3, #2
 8000548:	d136      	bne.n	80005b8 <GPIO_Init+0x190>
	{
		uint8_t temp1 = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	72bb      	strb	r3, [r7, #10]

		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	08db      	lsrs	r3, r3, #3
 8000558:	72fb      	strb	r3, [r7, #11]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	72bb      	strb	r3, [r7, #10]

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	7a5b      	ldrb	r3, [r3, #9]
 8000568:	461a      	mov	r2, r3
 800056a:	7abb      	ldrb	r3, [r7, #10]
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF <<  (4 * temp2));  //clearing
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	7afa      	ldrb	r2, [r7, #11]
 800057a:	3208      	adds	r2, #8
 800057c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000580:	7abb      	ldrb	r3, [r7, #10]
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	220f      	movs	r2, #15
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	7afa      	ldrb	r2, [r7, #11]
 8000594:	4001      	ands	r1, r0
 8000596:	3208      	adds	r2, #8
 8000598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= temp;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	7afa      	ldrb	r2, [r7, #11]
 80005a2:	3208      	adds	r2, #8
 80005a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	7afa      	ldrb	r2, [r7, #11]
 80005ae:	68f9      	ldr	r1, [r7, #12]
 80005b0:	4301      	orrs	r1, r0
 80005b2:	3208      	adds	r2, #8
 80005b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <GPIO_ReadFromInputPin>:
 * @Note		- none
 *
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	691a      	ldr	r2, [r3, #16]
 80005d2:	78fb      	ldrb	r3, [r7, #3]
 80005d4:	fa22 f303 	lsr.w	r3, r2, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	73fb      	strb	r3, [r7, #15]

	return value;
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <GPIO_TogglePin>:
 * @Note		- none
 *
 */

void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR	^= (1 << PinNumber);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	78fa      	ldrb	r2, [r7, #3]
 80005fe:	2101      	movs	r1, #1
 8000600:	fa01 f202 	lsl.w	r2, r1, r2
 8000604:	405a      	eors	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	615a      	str	r2, [r3, #20]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <__libc_init_array>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	4d0d      	ldr	r5, [pc, #52]	; (800064c <__libc_init_array+0x38>)
 8000618:	4c0d      	ldr	r4, [pc, #52]	; (8000650 <__libc_init_array+0x3c>)
 800061a:	1b64      	subs	r4, r4, r5
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	2600      	movs	r6, #0
 8000620:	42a6      	cmp	r6, r4
 8000622:	d109      	bne.n	8000638 <__libc_init_array+0x24>
 8000624:	4d0b      	ldr	r5, [pc, #44]	; (8000654 <__libc_init_array+0x40>)
 8000626:	4c0c      	ldr	r4, [pc, #48]	; (8000658 <__libc_init_array+0x44>)
 8000628:	f000 f818 	bl	800065c <_init>
 800062c:	1b64      	subs	r4, r4, r5
 800062e:	10a4      	asrs	r4, r4, #2
 8000630:	2600      	movs	r6, #0
 8000632:	42a6      	cmp	r6, r4
 8000634:	d105      	bne.n	8000642 <__libc_init_array+0x2e>
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f855 3b04 	ldr.w	r3, [r5], #4
 800063c:	4798      	blx	r3
 800063e:	3601      	adds	r6, #1
 8000640:	e7ee      	b.n	8000620 <__libc_init_array+0xc>
 8000642:	f855 3b04 	ldr.w	r3, [r5], #4
 8000646:	4798      	blx	r3
 8000648:	3601      	adds	r6, #1
 800064a:	e7f2      	b.n	8000632 <__libc_init_array+0x1e>
 800064c:	08000674 	.word	0x08000674
 8000650:	08000674 	.word	0x08000674
 8000654:	08000674 	.word	0x08000674
 8000658:	08000678 	.word	0x08000678

0800065c <_init>:
 800065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065e:	bf00      	nop
 8000660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000662:	bc08      	pop	{r3}
 8000664:	469e      	mov	lr, r3
 8000666:	4770      	bx	lr

08000668 <_fini>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	bf00      	nop
 800066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066e:	bc08      	pop	{r3}
 8000670:	469e      	mov	lr, r3
 8000672:	4770      	bx	lr
